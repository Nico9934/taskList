import { hashPassword } from "../libs/hashPassword.js";
import { createAccessToken } from "../libs/jwt.js";
import User from "../models/userModel.js";
import bcrypt from "bcryptjs";

export const register = async (req, res) => {
  const { email, password, userName } = req.body;

  try {
    const userFound = await User.findOne({ email });
    if (userFound) {
      res.send("El usuario ya existe");
      return;
    }
    const passwordHash = await bcrypt.hash(password, 10);

    const newUser = new User({
      userName,
      email,
      password: passwordHash,
    });

    const userSaved = await newUser.save();

    const token = await createAccessToken({ id: userSaved._id });

    res.cookie("token", token);
    res.json({
      id: userSaved._id,
      userName: userSaved.userName,
      email: userSaved.email,
      createdAt: userSaved.createdAt,
      updatedAt: userSaved.updatedAt,
    });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

export const login = async (req, res) => {
  const { email, password } = req.body;

  try {
    const userFound = await User.findOne({ email });
    if (!userFound)
      return res.status(400).json({ message: "No existe este usuario" });

    const isMatch = await bcrypt.compare(password, userFound.password);

    if (!isMatch)
      return res.status(500).json({ message: "La contraseña es incorrecta" });

    const token = await createAccessToken({ id: userFound._id });

    res.cookie("token", token);
    res.json({
      id: userFound._id,
      userName: userFound.userName,
      email: userFound.email,
      createdAt: userFound.createdAt,
      updatedAt: userFound.updatedAt,
    });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

export const logout = (req, res) => {
  res.cookie("token", "", {
    expires: new Date(0),
  });
  return res.status(200).json({ message: "Sesión cerrada con exito" });
};

export const profile = async (req, res) => {
  const { id } = req.user;

  const userFound = User.findById(id);
  if (!userFound) return res.status(401).json({ message: "User not found" });

  return res.json({
    id: userFound._id,
    userName: userFound.userName,
    email: userFound.email,
  });
};